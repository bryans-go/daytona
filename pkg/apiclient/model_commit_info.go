/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CommitInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitInfo{}

// CommitInfo struct for CommitInfo
type CommitInfo struct {
	Author  string `json:"author"`
	Branch  string `json:"branch"`
	Date    string `json:"date"`
	Hash    string `json:"hash"`
	Message string `json:"message"`
}

type _CommitInfo CommitInfo

// NewCommitInfo instantiates a new CommitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitInfo(author string, branch string, date string, hash string, message string) *CommitInfo {
	this := CommitInfo{}
	this.Author = author
	this.Branch = branch
	this.Date = date
	this.Hash = hash
	this.Message = message
	return &this
}

// NewCommitInfoWithDefaults instantiates a new CommitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitInfoWithDefaults() *CommitInfo {
	this := CommitInfo{}
	return &this
}

// GetAuthor returns the Author field value
func (o *CommitInfo) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *CommitInfo) SetAuthor(v string) {
	o.Author = v
}

// GetBranch returns the Branch field value
func (o *CommitInfo) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *CommitInfo) SetBranch(v string) {
	o.Branch = v
}

// GetDate returns the Date field value
func (o *CommitInfo) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CommitInfo) SetDate(v string) {
	o.Date = v
}

// GetHash returns the Hash field value
func (o *CommitInfo) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *CommitInfo) SetHash(v string) {
	o.Hash = v
}

// GetMessage returns the Message field value
func (o *CommitInfo) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CommitInfo) SetMessage(v string) {
	o.Message = v
}

func (o CommitInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["author"] = o.Author
	toSerialize["branch"] = o.Branch
	toSerialize["date"] = o.Date
	toSerialize["hash"] = o.Hash
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *CommitInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"author",
		"branch",
		"date",
		"hash",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitInfo := _CommitInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitInfo)

	if err != nil {
		return err
	}

	*o = CommitInfo(varCommitInfo)

	return err
}

type NullableCommitInfo struct {
	value *CommitInfo
	isSet bool
}

func (v NullableCommitInfo) Get() *CommitInfo {
	return v.value
}

func (v *NullableCommitInfo) Set(val *CommitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitInfo(val *CommitInfo) *NullableCommitInfo {
	return &NullableCommitInfo{value: val, isSet: true}
}

func (v NullableCommitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
